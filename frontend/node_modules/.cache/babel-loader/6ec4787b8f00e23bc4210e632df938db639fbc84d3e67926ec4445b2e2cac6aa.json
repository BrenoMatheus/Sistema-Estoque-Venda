{"ast":null,"code":"import VendasService from '@/services/api/vendas/VendasService';\nimport { Bar } from 'vue-chartjs';\nimport { Chart as ChartJS, Title, Tooltip, Legend, BarElement, CategoryScale, LinearScale } from 'chart.js';\nimport marcaService from '@/services/api/marca/marcaService';\nimport ServiceGrupoProduto from '@/services/api/grupoProduto/grupoProdutoService';\nChartJS.register(Title, Tooltip, Legend, BarElement, CategoryScale, LinearScale);\nexport default {\n  props: ['filter'],\n  name: 'BarChart',\n  components: {\n    Bar\n  },\n  data() {\n    return {\n      marcas: [],\n      grupos: [],\n      componentKey: 0,\n      loading: false,\n      dataLoaded: false,\n      ChartMarca: {\n        labels: [],\n        datasets: [{\n          label: 'Total de vendas por marca',\n          backgroundColor: '#228B22',\n          data: []\n        }]\n      },\n      ChartGrupo: {\n        labels: [],\n        datasets: [{\n          label: 'Total de vendas por grupo',\n          backgroundColor: '#DAA520',\n          data: []\n        }]\n      },\n      chartOptions: {\n        responsive: true\n      }\n    };\n  },\n  watch: {\n    filter: {\n      immediate: true,\n      handler(newValue) {\n        this.getAll();\n      }\n    }\n  },\n  methods: {\n    async getAll() {\n      try {\n        let params = {\n          all: '0',\n          agrupar_produto: '1'\n        };\n        this.loading = true;\n        const vendas = await VendasService.getAll(params);\n        const Marcas = await marcaService.getAll({\n          produtos: 1\n        });\n        const Grupos = await ServiceGrupoProduto.getAll({\n          produtos: 1\n        });\n        //const nomeMarca = [];\n        const precoMarca = [];\n        const totalVendasPorMarca = {};\n        //const marcaNome = {};\n\n        for (const venda of vendas) {\n          const marcaId = venda.produto.marca_id;\n          const valorDaVenda = venda.total_preco;\n          //console.log(valorDaVenda);\n\n          if (totalVendasPorMarca[marcaId]) {\n            totalVendasPorMarca[marcaId] += valorDaVenda;\n          } else {\n            totalVendasPorMarca[marcaId] = valorDaVenda;\n          }\n        }\n        console.log(totalVendasPorMarca);\n        //console.log(Marcas.nome);\n\n        //this.ChartMarca.labels.push(marcaId);\n        //this.ChartMarca.datasets[0].data.push(precoMarca);\n\n        const produtoMarca = Marcas.map(marca => marca.produtos);\n        const produtoMarcaId = Marcas.map(produto => [{\n          produtoId: produto.id\n        }]);\n        //console.log('marca', Marcas);\n        //console.log('prodmarc', produtoMarca);\n        //console.log('prodid', produtoMarcaId);\n\n        //this.marcas = response.filter(product => !this.marcas.has(product.id));marc\n        //this.grupos = response.filter(product => !this.grupos.has(product.id));\n\n        //console.log(this.marcas);\n        //console.log(this.grupos);\n\n        const currentMonth = new Date().getMonth();\n        this.ChartMarca.labels = [];\n        this.ChartMarca.datasets[0].data = [];\n        this.ChartGrupo.labels = [];\n        this.ChartGrupo.datasets[0].data = [];\n        this.dataLoaded = true;\n      } catch (error) {\n        this.emitVenda({\n          total_preco: 0,\n          total_quantidade: 'Não há registros'\n        });\n        this.ChartGrupo.labels = [];\n        this.ChartGrupo.datasets[0].data = [''];\n        this.ChartMarca.labels = [];\n        this.ChartMarca.datasets[0].data = [];\n        this.componentKey++;\n        console.error('Erro ao obter vendas:', error);\n      } finally {\n        this.loading = false;\n      }\n    },\n    emitVenda(currentMonth) {\n      this.$emit('currentMonth', currentMonth);\n    }\n  }\n};","map":{"version":3,"names":["VendasService","Bar","Chart","ChartJS","Title","Tooltip","Legend","BarElement","CategoryScale","LinearScale","marcaService","ServiceGrupoProduto","register","props","name","components","data","marcas","grupos","componentKey","loading","dataLoaded","ChartMarca","labels","datasets","label","backgroundColor","ChartGrupo","chartOptions","responsive","watch","filter","immediate","handler","newValue","getAll","methods","params","all","agrupar_produto","vendas","Marcas","produtos","Grupos","precoMarca","totalVendasPorMarca","venda","marcaId","produto","marca_id","valorDaVenda","total_preco","console","log","produtoMarca","map","marca","produtoMarcaId","produtoId","id","currentMonth","Date","getMonth","error","emitVenda","total_quantidade","$emit"],"sources":["/home/brenomatheus/Documentos/Teste Pratico DEV Junior/frontend/src/pages/Home/components/Venda/components/CategoryChartComponent.vue"],"sourcesContent":["<template>\n  <div class=\"pt-6\">\n    <div v-if=\"dataLoaded\" class=\"flex md:flex-col\">\n      <div class=\"p-4\">\n        <h5 class=\"text-xl font-bold pb-2\">Vendas por Marca</h5>\n        <Bar\n          id=\"vendaMarca\"\n          :key=\"componentKey\"\n          :options=\"chartOptions\"\n          :data=\"ChartMarca\"\n        />\n      </div>\n      <div class=\"p-4\">\n        <h5 class=\"text-xl font-bold pb-2\">Vendas por Grupo</h5>\n        <Bar\n          :key=\"componentKey\"\n          id=\"vendaGrupo\"\n          :options=\"chartOptions\"\n          :data=\"ChartGrupo\"\n        />\n      </div>\n    </div>\n    <div v-else>\n      <p>Carregando dados...</p>\n    </div>\n  </div>\n</template>\n<script>\nimport VendasService from '@/services/api/vendas/VendasService';\nimport { Bar } from 'vue-chartjs';\nimport {\n  Chart as ChartJS,\n  Title,\n  Tooltip,\n  Legend,\n  BarElement,\n  CategoryScale,\n  LinearScale,\n} from 'chart.js';\nimport marcaService from '@/services/api/marca/marcaService';\nimport ServiceGrupoProduto from '@/services/api/grupoProduto/grupoProdutoService';\n\nChartJS.register(\n  Title,\n  Tooltip,\n  Legend,\n  BarElement,\n  CategoryScale,\n  LinearScale\n);\n\nexport default {\n  props: ['filter'],\n\n  name: 'BarChart',\n  components: { Bar },\n  data() {\n    return {\n      marcas: [],\n      grupos: [],\n      componentKey: 0,\n      loading: false,\n      dataLoaded: false,\n\n      ChartMarca: {\n        labels: [],\n        datasets: [\n          {\n            label: 'Total de vendas por marca',\n            backgroundColor: '#228B22',\n            data: [],\n          },\n        ],\n      },\n\n      ChartGrupo: {\n        labels: [],\n        datasets: [\n          {\n            label: 'Total de vendas por grupo',\n            backgroundColor: '#DAA520',\n            data: [],\n          },\n        ],\n      },\n\n      chartOptions: {\n        responsive: true,\n      },\n    };\n  },\n  watch: {\n    filter: {\n      immediate: true,\n      handler(newValue) {\n        this.getAll();\n      },\n    },\n  },\n  methods: {\n    async getAll() {\n      try {\n        let params = { all: '0', agrupar_produto: '1' };\n\n        this.loading = true;\n        const vendas = await VendasService.getAll(params);\n\n        const Marcas = await marcaService.getAll({ produtos: 1 });\n        const Grupos = await ServiceGrupoProduto.getAll({ produtos: 1 });\n        //const nomeMarca = [];\n        const precoMarca = [];\n\n        const totalVendasPorMarca = {};\n        //const marcaNome = {};\n\n        for (const venda of vendas) {\n          const marcaId = venda.produto.marca_id;\n          const valorDaVenda = venda.total_preco; \n          //console.log(valorDaVenda);\n\n          if (totalVendasPorMarca[marcaId]) {\n            totalVendasPorMarca[marcaId] += valorDaVenda;\n          } else {\n            totalVendasPorMarca[marcaId] = valorDaVenda;\n          }\n        }\n        console.log(totalVendasPorMarca);\n//console.log(Marcas.nome);\n       \n        //this.ChartMarca.labels.push(marcaId);\n        //this.ChartMarca.datasets[0].data.push(precoMarca);\n\n        const produtoMarca = Marcas.map(marca => marca.produtos);\n\n        const produtoMarcaId = Marcas.map(produto => [\n          { produtoId: produto.id },\n        ]);\n        //console.log('marca', Marcas);\n        //console.log('prodmarc', produtoMarca);\n        //console.log('prodid', produtoMarcaId);\n\n        //this.marcas = response.filter(product => !this.marcas.has(product.id));marc\n        //this.grupos = response.filter(product => !this.grupos.has(product.id));\n\n        //console.log(this.marcas);\n        //console.log(this.grupos);\n\n        const currentMonth = new Date().getMonth();\n        this.ChartMarca.labels = [];\n        this.ChartMarca.datasets[0].data = [];\n        this.ChartGrupo.labels = [];\n        this.ChartGrupo.datasets[0].data = [];\n\n        this.dataLoaded = true;\n      } catch (error) {\n        this.emitVenda({\n          total_preco: 0,\n          total_quantidade: 'Não há registros',\n        });\n        this.ChartGrupo.labels = [];\n        this.ChartGrupo.datasets[0].data = [''];\n        this.ChartMarca.labels = [];\n        this.ChartMarca.datasets[0].data = [];\n        this.componentKey++;\n        console.error('Erro ao obter vendas:', error);\n      } finally {\n        this.loading = false;\n      }\n    },\n    emitVenda(currentMonth) {\n      this.$emit('currentMonth', currentMonth);\n    },\n  },\n};\n</script>\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}