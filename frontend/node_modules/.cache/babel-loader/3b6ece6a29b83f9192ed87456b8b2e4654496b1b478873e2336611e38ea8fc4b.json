{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport VendasService from '@/services/api/vendas/VendasService';\nimport { Bar } from 'vue-chartjs';\nimport { Chart as ChartJS, Title, Tooltip, Legend, BarElement, CategoryScale, LinearScale } from 'chart.js';\nChartJS.register(Title, Tooltip, Legend, BarElement, CategoryScale, LinearScale);\nconst meses = ['Janeiro', 'Fevereiro', 'Março', 'Abril', 'Maio', 'Junho', 'Julho', 'Agosto', 'Setembro', 'Outubro', 'Novembro', 'Dezembro'];\nexport default {\n  props: ['filter'],\n  name: 'BarChart',\n  components: {\n    Bar\n  },\n  data() {\n    return {\n      componentKey: 0,\n      loading: false,\n      dataLoaded: false,\n      ChartValor: {\n        labels: [],\n        datasets: [{\n          label: 'Valor total por mês',\n          backgroundColor: '#228B22',\n          data: []\n        }]\n      },\n      ChartQtd: {\n        labels: [],\n        datasets: [{\n          label: 'Total de vendas por mês',\n          backgroundColor: '#DAA520',\n          data: []\n        }]\n      },\n      chartOptions: {\n        responsive: true\n      }\n    };\n  },\n  watch: {\n    filter: {\n      immediate: true,\n      handler(newValue) {\n        this.getAll();\n      }\n    }\n  },\n  methods: {\n    getNomeMes(numeroMes) {\n      return meses[numeroMes - 1];\n    },\n    async getAll() {\n      try {\n        let params = {\n          all: '0',\n          agrupar_mes: '1'\n        };\n        if (this.filter !== null && Object.keys(this.filter).length > 0) {\n          console.log(this.filter.pessoa_id);\n          switch (true) {\n            case this.filter.ord_data !== undefined:\n              const NewFilter = delete this.filter.ord_data;\n              params = {\n                all: '0',\n                agrupar_mes: '1',\n                ...NewFilter\n              };\n            case this.filter.ord_valor !== undefined:\n              NewFilter = delete this.filter.valor;\n              params = {\n                all: '0',\n                agrupar_mes: '1',\n                ...NewFilter\n              };\n            default:\n              params = {\n                all: '0',\n                agrupar_mes: '1',\n                ...this.filter\n              };\n              break;\n          }\n        }\n        this.loading = true;\n        const response = await VendasService.getAll(params);\n        const currentMonth = new Date().getMonth();\n        this.ChartValor.labels = [];\n        this.ChartValor.datasets[0].data = [];\n        this.ChartQtd.labels = [];\n        this.ChartQtd.datasets[0].data = [];\n        for (let item of response) {\n          if (item.mes == currentMonth) {\n            this.currentMonth = item;\n            this.emitVenda(item);\n          }\n          this.ChartValor.labels.push(this.getNomeMes(item.mes));\n          this.ChartQtd.labels.push(this.getNomeMes(item.mes));\n          this.ChartValor.datasets[0].data.push(parseFloat(item.total_preco.replace(',', '.')));\n          this.ChartQtd.datasets[0].data.push(item.total_quantidade);\n          this.componentKey++;\n        }\n        this.dataLoaded = true;\n      } catch (error) {\n        this.ChartValor.labels = [];\n        this.ChartValor.datasets[0].data = [''];\n        this.ChartQtd.labels = [];\n        this.ChartQtd.datasets[0].data = [];\n        this.componentKey++;\n        console.error('Erro ao obter vendas:', error);\n      } finally {\n        this.loading = false;\n      }\n    },\n    emitVenda(currentMonth) {\n      this.$emit('currentMonth', currentMonth);\n    }\n  }\n};","map":{"version":3,"names":["VendasService","Bar","Chart","ChartJS","Title","Tooltip","Legend","BarElement","CategoryScale","LinearScale","register","meses","props","name","components","data","componentKey","loading","dataLoaded","ChartValor","labels","datasets","label","backgroundColor","ChartQtd","chartOptions","responsive","watch","filter","immediate","handler","newValue","getAll","methods","getNomeMes","numeroMes","params","all","agrupar_mes","Object","keys","length","console","log","pessoa_id","ord_data","undefined","NewFilter","ord_valor","valor","response","currentMonth","Date","getMonth","item","mes","emitVenda","push","parseFloat","total_preco","replace","total_quantidade","error","$emit"],"sources":["/home/brenomatheus/Documentos/Teste Pratico DEV Junior/frontend/src/pages/Home/components/Venda/components/VendasChartComponent.vue"],"sourcesContent":["<template>\n  <div class=\"pt-6\">\n    <div v-if=\"dataLoaded\">\n      <div class=\"p-4\">\n        <h5 class=\"text-xl font-bold pb-2\">Vendas por Mês</h5>\n        <Bar\n          id=\"QtdMes\"\n          :key=\"componentKey\"\n          :options=\"chartOptions\"\n          :data=\"ChartQtd\"\n        />\n      </div>\n      <div class=\"p-4\">\n        <h5 class=\"text-xl font-bold pb-2\">Valor total vendido por mês</h5>\n        <Bar\n          id=\"ValorMes\"\n          :options=\"chartOptions\"\n          :data=\"ChartValor\"\n          :key=\"componentKey\"\n        />\n      </div>\n    </div>\n    <div v-else>\n      <p>Carregando dados...</p>\n    </div>\n  </div>\n</template>\n<script>\nimport VendasService from '@/services/api/vendas/VendasService';\nimport { Bar } from 'vue-chartjs';\nimport {\n  Chart as ChartJS,\n  Title,\n  Tooltip,\n  Legend,\n  BarElement,\n  CategoryScale,\n  LinearScale,\n} from 'chart.js';\n\nChartJS.register(\n  Title,\n  Tooltip,\n  Legend,\n  BarElement,\n  CategoryScale,\n  LinearScale\n);\n\nconst meses = [\n  'Janeiro',\n  'Fevereiro',\n  'Março',\n  'Abril',\n  'Maio',\n  'Junho',\n  'Julho',\n  'Agosto',\n  'Setembro',\n  'Outubro',\n  'Novembro',\n  'Dezembro',\n];\n\nexport default {\n  props: ['filter'],\n\n  name: 'BarChart',\n  components: { Bar },\n  data() {\n    return {\n      componentKey: 0,\n      loading: false,\n      dataLoaded: false,\n\n      ChartValor: {\n        labels: [],\n        datasets: [\n          {\n            label: 'Valor total por mês',\n            backgroundColor: '#228B22',\n            data: [],\n          },\n        ],\n      },\n\n      ChartQtd: {\n        labels: [],\n        datasets: [\n          {\n            label: 'Total de vendas por mês',\n            backgroundColor: '#DAA520',\n            data: [],\n          },\n        ],\n      },\n\n      chartOptions: {\n        responsive: true,\n      },\n    };\n  },\n  watch: {\n    filter: {\n      immediate: true,\n      handler(newValue) {\n        this.getAll();\n      },\n    },\n  },\n  methods: {\n    getNomeMes(numeroMes) {\n      return meses[numeroMes - 1];\n    },\n    async getAll() {\n      try {\n        let params = { all: '0', agrupar_mes: '1' };\n\n        if (this.filter !== null && Object.keys(this.filter).length > 0) {\n           \n          console.log(this.filter.pessoa_id);\n          switch (true) {\n            case this.filter.ord_data !== undefined:\n              const NewFilter = delete this.filter.ord_data;\n              params = { all: '0', agrupar_mes: '1', ...NewFilter};\n            case this.filter.ord_valor !== undefined:\n              NewFilter = delete this.filter.valor;\n              params = { all: '0', agrupar_mes: '1', ...NewFilter};\n           \n            default:\n              params = { all: '0', agrupar_mes: '1', ...this.filter};\n              break;\n          }\n        }\n\n        this.loading = true;\n        const response = await VendasService.getAll(params);\n\n        const currentMonth = new Date().getMonth();\n        this.ChartValor.labels = [];\n        this.ChartValor.datasets[0].data = [];\n        this.ChartQtd.labels = [];\n        this.ChartQtd.datasets[0].data = [];\n\n        for (let item of response) {\n          if (item.mes == currentMonth) {\n            this.currentMonth = item;\n            this.emitVenda(item);\n          }\n\n          this.ChartValor.labels.push(this.getNomeMes(item.mes));\n          this.ChartQtd.labels.push(this.getNomeMes(item.mes));\n          this.ChartValor.datasets[0].data.push(\n            parseFloat(item.total_preco.replace(',', '.'))\n          );\n          this.ChartQtd.datasets[0].data.push(item.total_quantidade);\n\n          this.componentKey++;\n        }\n\n        this.dataLoaded = true;\n      } catch (error) {\n        this.ChartValor.labels = [];\n        this.ChartValor.datasets[0].data = [''];\n        this.ChartQtd.labels = [];\n        this.ChartQtd.datasets[0].data = [];\n        this.componentKey++;\n        console.error('Erro ao obter vendas:', error);\n      } finally {\n        this.loading = false;\n      }\n    },\n    emitVenda(currentMonth) {\n      this.$emit('currentMonth', currentMonth);\n    },\n  },\n};\n</script>\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}