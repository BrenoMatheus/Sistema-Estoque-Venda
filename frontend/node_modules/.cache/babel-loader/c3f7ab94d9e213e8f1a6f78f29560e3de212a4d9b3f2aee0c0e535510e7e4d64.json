{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport VendasService from '@/services/api/vendas/VendasService';\nimport { Bar } from 'vue-chartjs';\nimport { Chart as ChartJS, Title, Tooltip, Legend, BarElement, CategoryScale, LinearScale } from 'chart.js';\nimport marcaService from '@/services/api/marca/marcaService';\nimport ServiceGrupoProduto from '@/services/api/grupoProduto/grupoProdutoService';\nChartJS.register(Title, Tooltip, Legend, BarElement, CategoryScale, LinearScale);\nexport default {\n  props: ['filter'],\n  name: 'BarChart',\n  components: {\n    Bar\n  },\n  data() {\n    return {\n      marcas: [],\n      grupos: [],\n      componentKey: 0,\n      loading: false,\n      dataLoaded: false,\n      ChartValor: {\n        labels: [],\n        datasets: [{\n          label: 'Valor total por mês',\n          backgroundColor: '#228B22',\n          data: []\n        }]\n      },\n      ChartQtd: {\n        labels: [],\n        datasets: [{\n          label: 'Total de vendas por mês',\n          backgroundColor: '#DAA520',\n          data: []\n        }]\n      },\n      chartOptions: {\n        responsive: true\n      }\n    };\n  },\n  watch: {\n    filter: {\n      immediate: true,\n      handler(newValue) {\n        this.getAll();\n      }\n    }\n  },\n  methods: {\n    getNomeMes(numeroMes) {\n      return meses[numeroMes - 1];\n    },\n    async getAll() {\n      try {\n        let params = {\n          all: '0',\n          agrupar_mes: '1'\n        };\n        this.loading = true;\n        const response = await VendasService.getAll(params);\n        const Marcas = await marcaService.getAll({\n          produtos: 1\n        });\n        const Grupos = await ServiceGrupoProduto.getAll({\n          produtos: 1\n        });\n        console.log(Marcas);\n        console.log(Grupos);\n\n        //this.marcas = response.filter(product => !this.marcas.has(product.id));\n        //this.grupos = response.filter(product => !this.grupos.has(product.id));\n\n        //console.log(this.marcas);\n        //console.log(this.grupos);\n\n        const currentMonth = new Date().getMonth();\n        this.ChartValor.labels = [];\n        this.ChartValor.datasets[0].data = [];\n        this.ChartQtd.labels = [];\n        this.ChartQtd.datasets[0].data = [];\n        for (let item of response) {\n          this.ChartValor.labels.push(this.getNomeMes(item.mes));\n          this.ChartQtd.labels.push(this.getNomeMes(item.mes));\n          this.ChartValor.datasets[0].data.push(parseFloat(item.total_preco.replace(',', '.')));\n          this.ChartQtd.datasets[0].data.push(item.total_quantidade);\n          this.componentKey++;\n        }\n        this.dataLoaded = true;\n      } catch (error) {\n        this.emitVenda({\n          total_preco: 0,\n          total_quantidade: 'Não há registros'\n        });\n        this.ChartValor.labels = [];\n        this.ChartValor.datasets[0].data = [''];\n        this.ChartQtd.labels = [];\n        this.ChartQtd.datasets[0].data = [];\n        this.componentKey++;\n        console.error('Erro ao obter vendas:', error);\n      } finally {\n        this.loading = false;\n      }\n    },\n    emitVenda(currentMonth) {\n      this.$emit('currentMonth', currentMonth);\n    }\n  }\n};","map":{"version":3,"names":["VendasService","Bar","Chart","ChartJS","Title","Tooltip","Legend","BarElement","CategoryScale","LinearScale","marcaService","ServiceGrupoProduto","register","props","name","components","data","marcas","grupos","componentKey","loading","dataLoaded","ChartValor","labels","datasets","label","backgroundColor","ChartQtd","chartOptions","responsive","watch","filter","immediate","handler","newValue","getAll","methods","getNomeMes","numeroMes","meses","params","all","agrupar_mes","response","Marcas","produtos","Grupos","console","log","currentMonth","Date","getMonth","item","push","mes","parseFloat","total_preco","replace","total_quantidade","error","emitVenda","$emit"],"sources":["/home/brenomatheus/Documentos/Teste Pratico DEV Junior/frontend/src/pages/Home/components/Venda/components/CategoryChartComponent.vue"],"sourcesContent":["<template>\n    <div class=\"pt-6\">\n      <div v-if=\"dataLoaded\" class=\"flex md:flex-col\">\n        <div class=\"p-4\">\n          <h5 class=\"text-xl font-bold pb-2\">Vendas por Marca</h5>\n          <Bar\n            id=\"vendaMarca\"\n            :key=\"componentKey\"\n            :options=\"chartOptions\"\n            :data=\"ChartMarca\"\n          />\n        </div>\n        <div class=\"p-4\">\n          <h5 class=\"text-xl font-bold pb-2\">Vendas por Grupo</h5>\n          <Bar\n            :key=\"componentKey\"\n            id=\"vendaGrupo\"\n            :options=\"chartOptions\"\n            :data=\"ChartGrupo\"\n          />\n        </div>\n      </div>\n      <div v-else>\n        <p>Carregando dados...</p>\n      </div>\n    </div>\n  </template>\n  <script>\n  import VendasService from '@/services/api/vendas/VendasService';\n  import { Bar } from 'vue-chartjs';\n  import {\n    Chart as ChartJS,\n    Title,\n    Tooltip,\n    Legend,\n    BarElement,\n    CategoryScale,\n    LinearScale,\n  } from 'chart.js';\nimport marcaService from '@/services/api/marca/marcaService';\nimport ServiceGrupoProduto from '@/services/api/grupoProduto/grupoProdutoService';\n  \n  ChartJS.register(\n    Title,\n    Tooltip,\n    Legend,\n    BarElement,\n    CategoryScale,\n    LinearScale\n  );\n  \n  export default {\n    props: ['filter'],\n  \n    name: 'BarChart',\n    components: { Bar },\n    data() {\n      return {\n        marcas: [],\n        grupos: [],\n        componentKey: 0,\n        loading: false,\n        dataLoaded: false,\n  \n        ChartValor: {\n          labels: [],\n          datasets: [\n            {\n              label: 'Valor total por mês',\n              backgroundColor: '#228B22',\n              data: [],\n            },\n          ],\n        },\n  \n        ChartQtd: {\n          labels: [],\n          datasets: [\n            {\n              label: 'Total de vendas por mês',\n              backgroundColor: '#DAA520',\n              data: [],\n            },\n          ],\n        },\n  \n        chartOptions: {\n          responsive: true,\n        },\n      };\n    },\n    watch: {\n      filter: {\n        immediate: true,\n        handler(newValue) {\n          this.getAll();\n        },\n      },\n    },\n    methods: {\n      \n      getNomeMes(numeroMes) {\n        return meses[numeroMes - 1];\n      },\n      async getAll() {\n        try {\n          let params = { all: '0', agrupar_mes: '1' };\n  \n          \n          this.loading = true;\n          const response = await VendasService.getAll(params);\n         \n          const Marcas = await marcaService.getAll({ produtos: 1 });\n          const Grupos = await ServiceGrupoProduto.getAll({ produtos: 1 });\n          console.log(Marcas);\n          console.log(Grupos);\n\n          //this.marcas = response.filter(product => !this.marcas.has(product.id));\n          //this.grupos = response.filter(product => !this.grupos.has(product.id));\n         \n          //console.log(this.marcas);\n          //console.log(this.grupos);\n         \n          const currentMonth = new Date().getMonth();\n          this.ChartValor.labels = [];\n          this.ChartValor.datasets[0].data = [];\n          this.ChartQtd.labels = [];\n          this.ChartQtd.datasets[0].data = [];\n          \n          for (let item of response) {\n\n            this.ChartValor.labels.push(this.getNomeMes(item.mes));\n            this.ChartQtd.labels.push(this.getNomeMes(item.mes));\n            this.ChartValor.datasets[0].data.push(\n              parseFloat(item.total_preco.replace(',', '.'))\n            );\n            this.ChartQtd.datasets[0].data.push(item.total_quantidade);\n  \n            this.componentKey++;\n          }\n  \n          this.dataLoaded = true;\n        } catch (error) {\n          this.emitVenda({\n            total_preco: 0,\n            total_quantidade: 'Não há registros',\n          });\n          this.ChartValor.labels = [];\n          this.ChartValor.datasets[0].data = [''];\n          this.ChartQtd.labels = [];\n          this.ChartQtd.datasets[0].data = [];\n          this.componentKey++;\n          console.error('Erro ao obter vendas:', error);\n        } finally {\n          this.loading = false;\n        }\n      },\n      emitVenda(currentMonth) {\n        this.$emit('currentMonth', currentMonth);\n      },\n    },\n  };\n  </script>\n  "],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}