{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport VendasService from '@/services/api/vendas/VendasService';\nimport { Bar } from 'vue-chartjs';\nimport { Chart as ChartJS, Title, Tooltip, Legend, BarElement, CategoryScale, LinearScale } from 'chart.js';\nChartJS.register(Title, Tooltip, Legend, BarElement, CategoryScale, LinearScale);\nconst meses = ['Janeiro', 'Fevereiro', 'Março', 'Abril', 'Maio', 'Junho', 'Julho', 'Agosto', 'Setembro', 'Outubro', 'Novembro', 'Dezembro'];\nexport default {\n  props: ['modelValue', 'cliente'],\n  emits: ['update:modelValue'],\n  name: 'BarChart',\n  components: {\n    Bar\n  },\n  data() {\n    return {\n      componentKey: 0,\n      selectedPeople: this.modelValue,\n      currentMonth: [],\n      loading: false,\n      dataLoaded: false,\n      chartData: {\n        labels: [],\n        datasets: [{\n          label: 'Total de vendas por mês',\n          backgroundColor: '#87CEFA',\n          data: []\n        }]\n      },\n      chartOptions: {\n        responsive: true,\n        indexAxis: 'y'\n      }\n    };\n  },\n  watch: {\n    modelValue(newValue) {\n      this.selectedPeople = newValue;\n    },\n    cliente: {\n      immediate: true,\n      handler(newValue) {\n        this.getAll();\n      }\n    }\n  },\n  methods: {\n    getNomeMes(numeroMes) {\n      return meses[numeroMes - 1];\n    },\n    async getAll() {\n      try {\n        let params = {\n          all: '0',\n          agrupar_mes: '1'\n        };\n        if (this.cliente !== undefined && this.cliente !== null && this.cliente !== '') {\n          params.pessoa_id = this.cliente;\n        }\n        this.loading = true;\n        const response = await VendasService.getAll(params);\n        const currentMonth = new Date().getMonth();\n        this.chartData.labels = [];\n        this.chartData.datasets[0].data = [];\n\n        // Atualiza com novos dados\n        for (let item of response) {\n          if (item.mes == currentMonth) {\n            console.log(response);\n            this.currentMonth = response;\n            this.emitVenda(response);\n          }\n          this.chartData.labels.push(this.getNomeMes(item.mes));\n          this.chartData.datasets[0].data.push(parseFloat(item.total_preco.replace(',', '.')));\n          this.componentKey++;\n        }\n        this.dataLoaded = true;\n      } catch (error) {\n        this.chartData.labels = [];\n        this.chartData.datasets[0].data = [''];\n        this.componentKey++;\n        console.error('Erro ao obter vendas:', error);\n      } finally {\n        this.loading = false;\n      }\n    },\n    emitVenda(response) {\n      console.log(response);\n      this.$emit('currentMonth', this.currentMonth);\n    }\n  }\n};","map":{"version":3,"names":["VendasService","Bar","Chart","ChartJS","Title","Tooltip","Legend","BarElement","CategoryScale","LinearScale","register","meses","props","emits","name","components","data","componentKey","selectedPeople","modelValue","currentMonth","loading","dataLoaded","chartData","labels","datasets","label","backgroundColor","chartOptions","responsive","indexAxis","watch","newValue","cliente","immediate","handler","getAll","methods","getNomeMes","numeroMes","params","all","agrupar_mes","undefined","pessoa_id","response","Date","getMonth","item","mes","console","log","emitVenda","push","parseFloat","total_preco","replace","error","$emit"],"sources":["/home/brenomatheus/Documentos/Teste Pratico DEV Junior/frontend/src/pages/Home/components/Venda/components/QtdVendasChartComponent.vue"],"sourcesContent":["<template>\n  <div class=\"pt-6\">\n    <h5 class=\"text-xl font-bold pb-2\">Vendas por Mês</h5>\n    <Bar\n      v-if=\"dataLoaded\"\n      id=\"my-chart-id\"\n      :key=\"componentKey\"\n      :options=\"chartOptions\"\n      :data=\"chartData\"\n    />\n    <div v-else>\n      <p>Carregando dados...</p>\n    </div>\n  </div>\n</template>\n<script>\nimport VendasService from '@/services/api/vendas/VendasService';\nimport { Bar } from 'vue-chartjs';\nimport {\n  Chart as ChartJS,\n  Title,\n  Tooltip,\n  Legend,\n  BarElement,\n  CategoryScale,\n  LinearScale,\n} from 'chart.js';\n\nChartJS.register(\n  Title,\n  Tooltip,\n  Legend,\n  BarElement,\n  CategoryScale,\n  LinearScale\n);\n\nconst meses = [\n  'Janeiro',\n  'Fevereiro',\n  'Março',\n  'Abril',\n  'Maio',\n  'Junho',\n  'Julho',\n  'Agosto',\n  'Setembro',\n  'Outubro',\n  'Novembro',\n  'Dezembro',\n];\n\nexport default {\n  props: ['modelValue', 'cliente'],\n  emits: ['update:modelValue'],\n\n  name: 'BarChart',\n  components: { Bar },\n  data() {\n    return {\n      componentKey: 0,\n      selectedPeople: this.modelValue,\n      currentMonth:[],\n      loading: false,\n      dataLoaded: false,\n      chartData: {\n        labels: [],\n        datasets: [\n          {\n            label: 'Total de vendas por mês',\n            backgroundColor: '#87CEFA',\n            data: [],\n          },\n        ],\n      },\n      chartOptions: {\n        responsive: true,\n        indexAxis: 'y',\n      },\n    };\n  },\n  watch: {\n    modelValue(newValue) {\n      this.selectedPeople = newValue;\n    },\n    cliente: {\n      immediate: true,\n      handler(newValue) {\n        this.getAll();\n      },\n    },\n  },\n  methods: {\n    getNomeMes(numeroMes) {\n      return meses[numeroMes - 1];\n    },\n    async getAll() {\n      try {\n        let params = { all: '0', agrupar_mes: '1' };\n\n        if (\n          this.cliente !== undefined &&\n          this.cliente !== null &&\n          this.cliente !== ''\n        ) {\n          params.pessoa_id = this.cliente;\n        }\n        this.loading = true;\n        const response = await VendasService.getAll(params);\n\n        const currentMonth = new Date().getMonth();\n        this.chartData.labels = [];\n        this.chartData.datasets[0].data = [];\n        \n        // Atualiza com novos dados\n        for (let item of response) {\n\n         \n          if (item.mes == currentMonth) {\n            console.log(response);\n            this.currentMonth = response;\n            this.emitVenda(response);\n          }\n\n          this.chartData.labels.push(this.getNomeMes(item.mes));\n          this.chartData.datasets[0].data.push(\n            parseFloat(item.total_preco.replace(',', '.'))\n          );\n\n          this.componentKey++;\n        }\n\n        this.dataLoaded = true;\n      } catch (error) {\n        this.chartData.labels = [];\n        this.chartData.datasets[0].data = [''];\n        this.componentKey++;\n        console.error('Erro ao obter vendas:', error);\n      } finally {\n        this.loading = false;\n      }\n    },\n    emitVenda(response) {\n      console.log(response);\n      this.$emit('currentMonth', this.currentMonth);\n    },\n  },\n};\n</script>\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}