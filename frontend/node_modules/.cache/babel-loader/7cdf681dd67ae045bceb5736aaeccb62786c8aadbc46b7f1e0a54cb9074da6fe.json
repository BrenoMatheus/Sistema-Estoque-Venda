{"ast":null,"code":"import Api from '../axios-config/index';\nconst API_URL = 'http://localhost:8000/api';\nconst token = localStorage.getItem('userToken');\nconst PessoasService = {\n  async getAll(params) {\n    try {\n      const headers = {\n        Authorization: `Bearer ${token}`\n      };\n      const response = await Api().get(`${API_URL}/pessoa?`, {\n        params: params,\n        headers: headers\n      });\n      console.log(params);\n      console.log(response.data.data);\n      return response.data;\n    } catch (error) {\n      console.error('Erro ao obter pessoa:', error);\n      throw new Error('Erro ao obter pessoa da API.');\n      return '';\n    }\n  },\n  async getById(id) {\n    try {\n      const response = await axios.get(`${API_URL}/pessoa/${id}`, {\n        headers: {\n          Authorization: `Bearer ${token}`\n        }\n      });\n      return response.data;\n    } catch (error) {\n      console.error('Erro ao obter pessoa:', error);\n      throw new Error('Erro ao obter pessoa da API.');\n    }\n  },\n  async cadastrar(data) {\n    try {\n      const response = await axios.post(`${API_URL}/pessoa`, data, {\n        headers: {\n          Authorization: `Bearer ${token}`\n        }\n      });\n      if (response.status === 201) {\n        return {\n          success: true,\n          message: 'Pessoa cadastrada com sucesso'\n        };\n      }\n    } catch (error) {\n      console.error('Erro ao cadastrar a pessoa:', error);\n      return {\n        success: false,\n        message: 'Erro ao cadastrar a pessoa'\n      };\n    }\n  },\n  async atualizar(id, newData) {\n    try {\n      const response = await axios.put(`${API_URL}/pessoa/${id}`, newData, {\n        headers: {\n          Authorization: `Bearer ${token}`\n        }\n      });\n      if (response.status === 201) {\n        return {\n          success: true,\n          message: 'Cadastro de pessoa atualizada com sucesso'\n        };\n      }\n    } catch (error) {\n      console.error('Erro ao atualizar pessoa:', error);\n      throw new Error('Erro ao atualizar pessoa da API.');\n    }\n  },\n  async remover(id) {\n    try {\n      const response = await axios.delete(`${API_URL}/pessoa/${id}`, {\n        headers: {\n          Authorization: `Bearer ${token}`\n        }\n      });\n      if (response.status === 201) {\n        return {\n          success: true,\n          message: 'Cadastro de pessoa removido com sucesso'\n        };\n      }\n    } catch (error) {\n      console.error('Erro ao remover pessoa:', error);\n      throw new Error('Erro ao remover pessoa da API.');\n    }\n  }\n};\nexport default PessoasService;\n\n//mail@mail.com","map":{"version":3,"names":["Api","API_URL","token","localStorage","getItem","PessoasService","getAll","params","headers","Authorization","response","get","console","log","data","error","Error","getById","id","axios","cadastrar","post","status","success","message","atualizar","newData","put","remover","delete"],"sources":["/home/brenomatheus/Documentos/Teste Pratico DEV Junior/frontend/src/services/api/pessoas/PessoasService.js"],"sourcesContent":["import Api from '../axios-config/index';\n\nconst API_URL = 'http://localhost:8000/api';\nconst token = localStorage.getItem('userToken');\n\nconst PessoasService = {\n\n  async getAll(params) {\n    try {\n      const headers = {\n        Authorization: `Bearer ${token}`\n      };\n      const response = await Api().get(`${API_URL}/pessoa?`, {\n        params: params,\n        headers: headers\n      });\n      console.log(params);\n      console.log(response.data.data);\n      return response.data;\n    } catch (error) {\n      console.error('Erro ao obter pessoa:', error);\n      throw new Error('Erro ao obter pessoa da API.');\n      return '';\n    }\n  },\n  async getById(id) {\n    try {\n      const response = await axios.get(`${API_URL}/pessoa/${id}`, {\n        headers: { Authorization: `Bearer ${token}` }\n      });\n      return response.data;\n    } catch (error) {\n      console.error('Erro ao obter pessoa:', error);\n      throw new Error('Erro ao obter pessoa da API.');\n    }\n  },\n\n  async cadastrar(data) {\n    try {\n        const response = await axios.post(`${API_URL}/pessoa`, data,{\n            headers: {\n              Authorization: `Bearer ${token}`\n            }\n          });\n\n      if (response.status === 201) {\n        return { success: true, message: 'Pessoa cadastrada com sucesso' };\n      }\n    } catch (error) {\n      console.error('Erro ao cadastrar a pessoa:', error);\n      return { success: false, message: 'Erro ao cadastrar a pessoa' };\n    }\n  },\n\n  async atualizar(id, newData) {\n    try {\n      const response = await axios.put(`${API_URL}/pessoa/${id}`, newData, {\n        headers: { Authorization: `Bearer ${token}` }\n      });\n      if (response.status === 201) {\n        return { success: true, message: 'Cadastro de pessoa atualizada com sucesso' };\n      }\n    } catch (error) {\n      console.error('Erro ao atualizar pessoa:', error);\n      throw new Error('Erro ao atualizar pessoa da API.');\n    }\n  },\n\n  async remover(id) {\n    try {\n      const response = await axios.delete(`${API_URL}/pessoa/${id}`, {\n        headers: { Authorization: `Bearer ${token}` }\n      });\n      if (response.status === 201) {\n        return { success: true, message: 'Cadastro de pessoa removido com sucesso' };\n      }\n    } catch (error) {\n      console.error('Erro ao remover pessoa:', error);\n      throw new Error('Erro ao remover pessoa da API.');\n    }\n  }\n\n};\n\nexport default PessoasService;\n\n//mail@mail.com"],"mappings":"AAAA,OAAOA,GAAG,MAAM,uBAAuB;AAEvC,MAAMC,OAAO,GAAG,2BAA2B;AAC3C,MAAMC,KAAK,GAAGC,YAAY,CAACC,OAAO,CAAC,WAAW,CAAC;AAE/C,MAAMC,cAAc,GAAG;EAErB,MAAMC,MAAMA,CAACC,MAAM,EAAE;IACnB,IAAI;MACF,MAAMC,OAAO,GAAG;QACdC,aAAa,EAAG,UAASP,KAAM;MACjC,CAAC;MACD,MAAMQ,QAAQ,GAAG,MAAMV,GAAG,CAAC,CAAC,CAACW,GAAG,CAAE,GAAEV,OAAQ,UAAS,EAAE;QACrDM,MAAM,EAAEA,MAAM;QACdC,OAAO,EAAEA;MACX,CAAC,CAAC;MACFI,OAAO,CAACC,GAAG,CAACN,MAAM,CAAC;MACnBK,OAAO,CAACC,GAAG,CAACH,QAAQ,CAACI,IAAI,CAACA,IAAI,CAAC;MAC/B,OAAOJ,QAAQ,CAACI,IAAI;IACtB,CAAC,CAAC,OAAOC,KAAK,EAAE;MACdH,OAAO,CAACG,KAAK,CAAC,uBAAuB,EAAEA,KAAK,CAAC;MAC7C,MAAM,IAAIC,KAAK,CAAC,8BAA8B,CAAC;MAC/C,OAAO,EAAE;IACX;EACF,CAAC;EACD,MAAMC,OAAOA,CAACC,EAAE,EAAE;IAChB,IAAI;MACF,MAAMR,QAAQ,GAAG,MAAMS,KAAK,CAACR,GAAG,CAAE,GAAEV,OAAQ,WAAUiB,EAAG,EAAC,EAAE;QAC1DV,OAAO,EAAE;UAAEC,aAAa,EAAG,UAASP,KAAM;QAAE;MAC9C,CAAC,CAAC;MACF,OAAOQ,QAAQ,CAACI,IAAI;IACtB,CAAC,CAAC,OAAOC,KAAK,EAAE;MACdH,OAAO,CAACG,KAAK,CAAC,uBAAuB,EAAEA,KAAK,CAAC;MAC7C,MAAM,IAAIC,KAAK,CAAC,8BAA8B,CAAC;IACjD;EACF,CAAC;EAED,MAAMI,SAASA,CAACN,IAAI,EAAE;IACpB,IAAI;MACA,MAAMJ,QAAQ,GAAG,MAAMS,KAAK,CAACE,IAAI,CAAE,GAAEpB,OAAQ,SAAQ,EAAEa,IAAI,EAAC;QACxDN,OAAO,EAAE;UACPC,aAAa,EAAG,UAASP,KAAM;QACjC;MACF,CAAC,CAAC;MAEN,IAAIQ,QAAQ,CAACY,MAAM,KAAK,GAAG,EAAE;QAC3B,OAAO;UAAEC,OAAO,EAAE,IAAI;UAAEC,OAAO,EAAE;QAAgC,CAAC;MACpE;IACF,CAAC,CAAC,OAAOT,KAAK,EAAE;MACdH,OAAO,CAACG,KAAK,CAAC,6BAA6B,EAAEA,KAAK,CAAC;MACnD,OAAO;QAAEQ,OAAO,EAAE,KAAK;QAAEC,OAAO,EAAE;MAA6B,CAAC;IAClE;EACF,CAAC;EAED,MAAMC,SAASA,CAACP,EAAE,EAAEQ,OAAO,EAAE;IAC3B,IAAI;MACF,MAAMhB,QAAQ,GAAG,MAAMS,KAAK,CAACQ,GAAG,CAAE,GAAE1B,OAAQ,WAAUiB,EAAG,EAAC,EAAEQ,OAAO,EAAE;QACnElB,OAAO,EAAE;UAAEC,aAAa,EAAG,UAASP,KAAM;QAAE;MAC9C,CAAC,CAAC;MACF,IAAIQ,QAAQ,CAACY,MAAM,KAAK,GAAG,EAAE;QAC3B,OAAO;UAAEC,OAAO,EAAE,IAAI;UAAEC,OAAO,EAAE;QAA4C,CAAC;MAChF;IACF,CAAC,CAAC,OAAOT,KAAK,EAAE;MACdH,OAAO,CAACG,KAAK,CAAC,2BAA2B,EAAEA,KAAK,CAAC;MACjD,MAAM,IAAIC,KAAK,CAAC,kCAAkC,CAAC;IACrD;EACF,CAAC;EAED,MAAMY,OAAOA,CAACV,EAAE,EAAE;IAChB,IAAI;MACF,MAAMR,QAAQ,GAAG,MAAMS,KAAK,CAACU,MAAM,CAAE,GAAE5B,OAAQ,WAAUiB,EAAG,EAAC,EAAE;QAC7DV,OAAO,EAAE;UAAEC,aAAa,EAAG,UAASP,KAAM;QAAE;MAC9C,CAAC,CAAC;MACF,IAAIQ,QAAQ,CAACY,MAAM,KAAK,GAAG,EAAE;QAC3B,OAAO;UAAEC,OAAO,EAAE,IAAI;UAAEC,OAAO,EAAE;QAA0C,CAAC;MAC9E;IACF,CAAC,CAAC,OAAOT,KAAK,EAAE;MACdH,OAAO,CAACG,KAAK,CAAC,yBAAyB,EAAEA,KAAK,CAAC;MAC/C,MAAM,IAAIC,KAAK,CAAC,gCAAgC,CAAC;IACnD;EACF;AAEF,CAAC;AAED,eAAeX,cAAc;;AAE7B"},"metadata":{},"sourceType":"module","externalDependencies":[]}