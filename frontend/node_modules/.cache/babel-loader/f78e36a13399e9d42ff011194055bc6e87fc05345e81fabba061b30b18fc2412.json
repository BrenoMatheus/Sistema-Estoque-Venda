{"ast":null,"code":"import { createElementVNode as _createElementVNode, resolveComponent as _resolveComponent, openBlock as _openBlock, createBlock as _createBlock, createElementBlock as _createElementBlock, createCommentVNode as _createCommentVNode } from \"vue\";\nconst _hoisted_1 = {\n  class: \"pt-6\"\n};\nconst _hoisted_2 = {\n  key: 0,\n  class: \"flex md:flex-col\"\n};\nconst _hoisted_3 = {\n  class: \"p-4\"\n};\nconst _hoisted_4 = /*#__PURE__*/_createElementVNode(\"h5\", {\n  class: \"text-xl font-bold pb-2\"\n}, \"Vendas por Marca\", -1 /* HOISTED */);\nconst _hoisted_5 = {\n  key: 1\n};\nconst _hoisted_6 = /*#__PURE__*/_createElementVNode(\"p\", null, \"Carregando dados...\", -1 /* HOISTED */);\nconst _hoisted_7 = [_hoisted_6];\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  const _component_Bar = _resolveComponent(\"Bar\");\n  return _openBlock(), _createElementBlock(\"div\", _hoisted_1, [$data.dataLoaded ? (_openBlock(), _createElementBlock(\"div\", _hoisted_2, [_createElementVNode(\"div\", _hoisted_3, [_hoisted_4, (_openBlock(), _createBlock(_component_Bar, {\n    id: \"vendaMarca\",\n    key: $data.componentKey,\n    options: $data.chartOptions,\n    data: $data.ChartMarca\n  }, null, 8 /* PROPS */, [\"options\", \"data\"]))])])) : (_openBlock(), _createElementBlock(\"div\", _hoisted_5, [..._hoisted_7]))]);\n}","map":{"version":3,"names":["class","key","_createElementVNode","_hoisted_6","_createElementBlock","_hoisted_1","$data","dataLoaded","_hoisted_2","_hoisted_3","_hoisted_4","_createBlock","_component_Bar","id","componentKey","options","chartOptions","data","ChartMarca","_hoisted_5","_hoisted_7"],"sources":["/home/brenomatheus/Documentos/Teste Pratico DEV Junior/frontend/src/pages/Home/components/Venda/components/CategoryChartComponent.vue"],"sourcesContent":["<template>\n  <div class=\"pt-6\">\n    <div v-if=\"dataLoaded\" class=\"flex md:flex-col\">\n      <div class=\"p-4\">\n        <h5 class=\"text-xl font-bold pb-2\">Vendas por Marca</h5>\n        <Bar\n          id=\"vendaMarca\"\n          :key=\"componentKey\"\n          :options=\"chartOptions\"\n          :data=\"ChartMarca\"\n        />\n      </div>\n      \n    </div>\n    <div v-else>\n      <p>Carregando dados...</p>\n    </div>\n  </div>\n</template>\n<script>\nimport VendasService from '@/services/api/vendas/VendasService';\nimport { Bar } from 'vue-chartjs';\nimport {\n  Chart as ChartJS,\n  Title,\n  Tooltip,\n  Legend,\n  BarElement,\n  CategoryScale,\n  LinearScale,\n} from 'chart.js';\nimport marcaService from '@/services/api/marca/marcaService';\nimport ServiceGrupoProduto from '@/services/api/grupoProduto/grupoProdutoService';\n\nChartJS.register(\n  Title,\n  Tooltip,\n  Legend,\n  BarElement,\n  CategoryScale,\n  LinearScale\n);\n\nexport default {\n  props: ['filter'],\n\n  name: 'BarChart',\n  components: { Bar },\n  data() {\n    return {\n      marcas: [],\n      grupos: [],\n      componentKey: 0,\n      loading: false,\n      dataLoaded: false,\n\n      ChartMarca: {\n        labels: [],\n        datasets: [\n          {\n            label: 'Total de vendas por marca',\n            backgroundColor: '#228B22',\n            data: [],\n          },\n        ],\n      },\n\n      \n\n      chartOptions: {\n        responsive: true,\n      },\n    };\n  },\n  watch: {\n    filter: {\n      immediate: true,\n      handler(newValue) {\n        this.getAll();\n      },\n    },\n  },\n  methods: {\n    async getAll() {\n      try {\n        let params = { all: '0' };\n\n        this.loading = true;\n        const response = await VendasService.getAll(params);\n\n        const Marcas = await marcaService.getAll({ produtos: 1 });\n        const Grupos = await ServiceGrupoProduto.getAll({ produtos: 1 });\n\n        //const produtos = Marcas.find(produto => produto.nome);\n\n        for (const item of Marcas) {\n          console.log('Marca:', item.nome); // Imprime o nome da marca\n          this.ChartMarca.labels.push(this.item.nome);\n\n          // Percorrendo os produtos de cada marca\n          for (const produto of item.produtos) {\n            for (let item of response) {\n              if (item.produto_id === produto.id) {\n                //console.log(item.preco);\n                this.ChartMarca.datasets[0].data.push(item.total_preco);\n              }\n              /*  */\n\n              //this.componentKey++;\n            }\n          }\n        }\n\n        const produtoMarca = Marcas.map(marca => marca.produtos);\n\n        const produtoMarcaId = Marcas.map(produto => [\n          { produtoId: produto.id },\n        ]);\n        //console.log('marca', Marcas);\n        //console.log('prodmarc', produtoMarca);\n        //console.log('prodid', produtoMarcaId);\n\n        //this.marcas = response.filter(product => !this.marcas.has(product.id));marc\n        //this.grupos = response.filter(product => !this.grupos.has(product.id));\n\n        //console.log(this.marcas);\n        //console.log(this.grupos);\n\n        const currentMonth = new Date().getMonth();\n        this.ChartMarca.labels = [];\n        this.ChartMarca.datasets[0].data = [];\n        this.ChartGrupo.labels = [];\n        this.ChartGrupo.datasets[0].data = [];\n\n        for (let item of response) {\n          if (Marcas.produtos.includes(item.produto_id)) {\n            console.log(item.produto_id);\n          }\n          /* this.ChartQtd.labels.push(this.getNomeMes(item.mes));\n            this.ChartQtd.datasets[0].data.push(item.total_quantidade); */\n\n          //this.componentKey++;\n        }\n\n        this.dataLoaded = true;\n      } catch (error) {\n        this.emitVenda({\n          total_preco: 0,\n          total_quantidade: 'Não há registros',\n        });\n        this.ChartValor.labels = [];\n        this.ChartValor.datasets[0].data = [''];\n        this.ChartQtd.labels = [];\n        this.ChartQtd.datasets[0].data = [];\n        this.componentKey++;\n        console.error('Erro ao obter vendas:', error);\n      } finally {\n        this.loading = false;\n      }\n    },\n    emitVenda(currentMonth) {\n      this.$emit('currentMonth', currentMonth);\n    },\n  },\n};\n</script>\n"],"mappings":";;EACOA,KAAK,EAAC;AAAM;;EADnBC,GAAA;EAE2BD,KAAK,EAAC;;;EACtBA,KAAK,EAAC;AAAK;gCACdE,mBAAA,CAAwD;EAApDF,KAAK,EAAC;AAAwB,GAAC,kBAAgB;;EAJ3DC,GAAA;AAAA;gCAeMC,mBAAA,CAA0B,WAAvB,qBAAmB;oBAAtBC,UAA0B,C;;;uBAd9BC,mBAAA,CAgBM,OAhBNC,UAgBM,GAfOC,KAAA,CAAAC,UAAU,I,cAArBH,mBAAA,CAWM,OAXNI,UAWM,GAVJN,mBAAA,CAQM,OARNO,UAQM,GAPJC,UAAwD,G,cACxDC,YAAA,CAKEC,cAAA;IAJAC,EAAE,EAAC,YAAY;IACdZ,GAAG,EAAEK,KAAA,CAAAQ,YAAY;IACjBC,OAAO,EAAET,KAAA,CAAAU,YAAY;IACrBC,IAAI,EAAEX,KAAA,CAAAY;sEAKbd,mBAAA,CAEM,OAhBVe,UAAA,MAAAC,UAAA,I"},"metadata":{},"sourceType":"module","externalDependencies":[]}