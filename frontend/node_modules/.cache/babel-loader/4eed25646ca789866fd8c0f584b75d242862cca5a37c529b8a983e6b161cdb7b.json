{"ast":null,"code":"import axios from 'axios';\nimport { Environment } from '../../../environment';\nconst API_URL = Environment.URL_BASE;\nconst token = localStorage.getItem('userToken');\nconst ProdutosService = {\n  async getAll(params) {\n    try {\n      const headers = {\n        Authorization: `Bearer ${token}`\n      };\n      const response = await axios.get(`${API_URL}/produto`, {\n        params: params,\n        headers: headers\n      });\n      return response.data;\n    } catch (error) {\n      console.error('Erro ao obter produto:', error);\n      throw new Error('Erro ao obter produto da API.');\n      return '';\n    }\n  },\n  async getById(id) {\n    try {\n      const response = await axios.get(`${API_URL}/produto/${id}`, {\n        headers: {\n          Authorization: `Bearer ${token}`\n        }\n      });\n      return response.data;\n    } catch (error) {\n      console.error('Erro ao obter produto:', error);\n      throw new Error('Erro ao obter produto da API.');\n    }\n  },\n  async cadastrar(data) {\n    try {\n      const response = await axios.post(`${API_URL}/produto`, data, {\n        headers: {\n          Authorization: `Bearer ${token}`\n        }\n      });\n      if (response.status === 201) {\n        return {\n          success: true,\n          message: 'Produto cadastrada com sucesso'\n        };\n      }\n    } catch (error) {\n      console.error('Erro ao cadastrar a produto:', error);\n      return {\n        success: false,\n        message: 'Erro ao cadastrar a produto'\n      };\n    }\n  },\n  async atualizar(id, newData) {\n    try {\n      const response = await axios.put(`${API_URL}/produto/${id}`, newData, {\n        headers: {\n          Authorization: `Bearer ${token}`\n        }\n      });\n      if (response.status === 201) {\n        return {\n          success: true,\n          message: 'Cadastro de produto atualizada com sucesso'\n        };\n      }\n    } catch (error) {\n      console.error('Erro ao atualizar produto:', error);\n      throw new Error('Erro ao atualizar produto da API.');\n    }\n  },\n  async remover(id) {\n    try {\n      const response = await axios.delete(`${API_URL}/produto/${id}`, {\n        headers: {\n          Authorization: `Bearer ${token}`\n        }\n      });\n      if (response.status === 201) {\n        return {\n          success: true,\n          message: 'Cadastro de produto removido com sucesso'\n        };\n      }\n    } catch (error) {\n      console.error('Erro ao remover produto:', error);\n      throw new Error('Erro ao remover produto da API.');\n    }\n  }\n};\nexport default ProdutosService;\n\n//mail@mail.com","map":{"version":3,"names":["axios","Environment","API_URL","URL_BASE","token","localStorage","getItem","ProdutosService","getAll","params","headers","Authorization","response","get","data","error","console","Error","getById","id","cadastrar","post","status","success","message","atualizar","newData","put","remover","delete"],"sources":["/home/brenomatheus/Documentos/Sistema de Controle de estoque e venda/BrenoMatheus-Sistema-Estoque-Venda/frontend/src/shared/services/api/produtos/ProdutosService.js"],"sourcesContent":["import axios from 'axios';\nimport { Environment } from '../../../environment';\n\nconst API_URL = Environment.URL_BASE;\nconst token = localStorage.getItem('userToken');\n\nconst ProdutosService = {\n\n  async getAll(params) {\n    try {\n      const headers = {\n        Authorization: `Bearer ${token}`\n      };\n\n      const response = await axios.get(`${API_URL}/produto`, {\n        params:params,\n        headers: headers\n      });\n\n      return response.data;\n    } catch (error) {\n      console.error('Erro ao obter produto:', error);\n      throw new Error('Erro ao obter produto da API.');\n      return '';\n    }\n  },\n  async getById(id) {\n    try {\n      const response = await axios.get(`${API_URL}/produto/${id}`, {\n        headers: { Authorization: `Bearer ${token}` }\n      });\n      return response.data;\n    } catch (error) {\n      console.error('Erro ao obter produto:', error);\n      throw new Error('Erro ao obter produto da API.');\n    }\n  },\n\n  async cadastrar(data) {\n    try {\n        const response = await axios.post(`${API_URL}/produto`, data,{\n            headers: {\n              Authorization: `Bearer ${token}`\n            }\n          });\n\n      if (response.status === 201) {\n        return { success: true, message: 'Produto cadastrada com sucesso' };\n      }\n    } catch (error) {\n      console.error('Erro ao cadastrar a produto:', error);\n      return { success: false, message: 'Erro ao cadastrar a produto' };\n    }\n  },\n\n  async atualizar(id, newData) {\n    try {\n      const response = await axios.put(`${API_URL}/produto/${id}`, newData, {\n        headers: { Authorization: `Bearer ${token}` }\n      });\n      if (response.status === 201) {\n        return { success: true, message: 'Cadastro de produto atualizada com sucesso' };\n      }\n    } catch (error) {\n      console.error('Erro ao atualizar produto:', error);\n      throw new Error('Erro ao atualizar produto da API.');\n    }\n  },\n\n  async remover(id) {\n    try {\n      const response = await axios.delete(`${API_URL}/produto/${id}`, {\n        headers: { Authorization: `Bearer ${token}` }\n      });\n      if (response.status === 201) {\n        return { success: true, message: 'Cadastro de produto removido com sucesso' };\n      }\n    } catch (error) {\n      console.error('Erro ao remover produto:', error);\n      throw new Error('Erro ao remover produto da API.');\n    }\n  }\n\n};\n\nexport default ProdutosService;\n\n//mail@mail.com"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}