{"ast":null,"code":"import PessoasService from '../../services/api/pessoas/PessoasService';\nimport DashboardComponent from '../Dashboard/DashboardComponent';\nimport { debounce } from 'lodash';\nexport default {\n  name: 'ListComponent',\n  components: {\n    DashboardComponent\n  },\n  data() {\n    return {\n      searchQuery: '',\n      selectedGroup: '',\n      selectedGender: '',\n      selectedAge: '',\n      people: [],\n      // Dados da tabela\n      minSearchLength: 3\n    };\n  },\n  computed: {\n    filteredPeople() {\n      let filtered = this.people;\n      if (this.shouldApplyFilters()) {\n        filtered = this.applyFilters(filtered);\n      }\n      return filtered;\n    }\n  },\n  methods: {\n    // Métodos do componente\n\n    // Método para verificar se os filtros devem ser aplicados\n    shouldApplyFilters() {\n      return this.searchQuery.length >= this.minSearchLength || this.selectedGroup || this.selectedGender || this.selectedAge;\n    },\n    // Método para aplicar filtros aos dados\n    applyFilters(data) {\n      let filtered = data;\n      if (this.searchQuery.length >= this.minSearchLength) {\n        filtered = filtered.filter(person => person.name.toLowerCase().includes(this.searchQuery.toLowerCase()));\n      }\n      if (this.selectedGroup) {\n        filtered = filtered.filter(person => person.group === this.selectedGroup);\n      }\n      if (this.selectedGender) {\n        filtered = filtered.filter(person => person.gender === this.selectedGender);\n      }\n      if (this.selectedAge) {\n        filtered = filtered.filter(person => person.age === parseInt(this.selectedAge));\n      }\n      return filtered;\n    },\n    // Método para construir os parâmetros com base nos filtros selecionados\n    buildParams() {\n      return {\n        grupo_id: this.selectedGroup,\n        genero: this.selectedGender,\n        nome: this.searchQuery,\n        idade: this.selectedAge\n      };\n    },\n    // Método para buscar dados com base nos filtros selecionados\n    async getAll(params) {\n      try {\n        const response = await PessoasService.getAll(params);\n        this.people = response;\n      } catch (error) {\n        console.error('Erro ao obter pessoas:', error);\n        throw new Error('Erro ao obter pessoas da API.');\n      }\n    },\n    // Método para lidar com a mudança nos filtros\n    handleFilterChange() {\n      if (this.shouldApplyFilters()) {\n        this.getAll(this.buildParams());\n      }\n    },\n    // Método para lidar com a entrada de pesquisa\n    handleSearchInput: debounce(function () {\n      if (this.shouldApplyFilters()) {\n        this.getAll(this.buildParams());\n      }\n    }, 300)\n  },\n  // Assista às mudanças nos filtros e chame handleFilterChange() quando houver mudanças\n  watch: {\n    searchQuery() {\n      this.handleFilterChange();\n    },\n    selectedGroup() {\n      this.handleFilterChange();\n    },\n    selectedGender() {\n      this.handleFilterChange();\n    },\n    selectedAge() {\n      this.handleFilterChange();\n    }\n  },\n  mounted() {\n    // Chame getAll() ao montar o componente para carregar os dados iniciais\n    this.getAll();\n  }\n};","map":{"version":3,"names":["PessoasService","DashboardComponent","debounce","name","components","data","searchQuery","selectedGroup","selectedGender","selectedAge","people","minSearchLength","computed","filteredPeople","filtered","shouldApplyFilters","applyFilters","methods","length","filter","person","toLowerCase","includes","group","gender","age","parseInt","buildParams","grupo_id","genero","nome","idade","getAll","params","response","error","console","Error","handleFilterChange","handleSearchInput","watch","mounted"],"sources":["/home/brenomatheus/Documentos/Teste Pratico DEV Junior/frontend/src/pages/Pessoa/ListComponent.vue"],"sourcesContent":["<script>\nimport PessoasService from '../../services/api/pessoas/PessoasService';\nimport DashboardComponent from '../Dashboard/DashboardComponent';\nimport { debounce } from 'lodash';\n\nexport default {\n  name: 'ListComponent',\n  components: {\n    DashboardComponent,\n  },\n  data() {\n    return {\n      searchQuery: '',\n      selectedGroup: '',\n      selectedGender: '',\n      selectedAge: '',\n      people: [], // Dados da tabela\n      minSearchLength: 3,\n    };\n  },\n  computed: {\n    filteredPeople() {\n      let filtered = this.people;\n      if (this.shouldApplyFilters()) {\n        filtered = this.applyFilters(filtered);\n      }\n      return filtered;\n    },\n  },\n  methods: {\n    // Métodos do componente\n\n    // Método para verificar se os filtros devem ser aplicados\n    shouldApplyFilters() {\n      return (\n        this.searchQuery.length >= this.minSearchLength ||\n        this.selectedGroup ||\n        this.selectedGender ||\n        this.selectedAge\n      );\n    },\n    // Método para aplicar filtros aos dados\n    applyFilters(data) {\n      let filtered = data;\n      if (this.searchQuery.length >= this.minSearchLength) {\n        filtered = filtered.filter(person =>\n          person.name.toLowerCase().includes(this.searchQuery.toLowerCase())\n        );\n      }\n      if (this.selectedGroup) {\n        filtered = filtered.filter(\n          person => person.group === this.selectedGroup\n        );\n      }\n      if (this.selectedGender) {\n        filtered = filtered.filter(\n          person => person.gender === this.selectedGender\n        );\n      }\n      if (this.selectedAge) {\n        filtered = filtered.filter(\n          person => person.age === parseInt(this.selectedAge)\n        );\n      }\n      return filtered;\n    },\n    // Método para construir os parâmetros com base nos filtros selecionados\n    buildParams() {\n      return {\n        grupo_id: this.selectedGroup,\n        genero: this.selectedGender,\n        nome: this.searchQuery,\n        idade: this.selectedAge,\n      };\n    },\n    // Método para buscar dados com base nos filtros selecionados\n    async getAll(params) {\n      try {\n        const response = await PessoasService.getAll(params);\n        this.people = response;\n      } catch (error) {\n        console.error('Erro ao obter pessoas:', error);\n        throw new Error('Erro ao obter pessoas da API.');\n      }\n    },\n    // Método para lidar com a mudança nos filtros\n    handleFilterChange() {\n      if (this.shouldApplyFilters()) {\n        this.getAll(this.buildParams());\n      }\n    },\n    // Método para lidar com a entrada de pesquisa\n    handleSearchInput: debounce(function() {\n      if (this.shouldApplyFilters()) {\n        this.getAll(this.buildParams());\n      }\n    }, 300),\n  },\n  // Assista às mudanças nos filtros e chame handleFilterChange() quando houver mudanças\n  watch: {\n    searchQuery() {\n      this.handleFilterChange();\n    },\n    selectedGroup() {\n      this.handleFilterChange();\n    },\n    selectedGender() {\n      this.handleFilterChange();\n    },\n    selectedAge() {\n      this.handleFilterChange();\n    },\n  },\n  mounted() {\n    // Chame getAll() ao montar o componente para carregar os dados iniciais\n    this.getAll();\n  },\n};\n</script>"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}