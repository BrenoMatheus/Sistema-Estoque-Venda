{"ast":null,"code":"import axios from 'axios';\nconst API_URL = 'http://localhost:8000/api';\nconst token = localStorage.getItem('userToken');\nconst PessoasService = {\n  getAll(params) {\n    return PessoasService.getAll(params).then(result => {\n      if (result instanceof Error) {\n        alert(result.message);\n        return {};\n      } else {\n        this.people = result;\n        console.log(result);\n      }\n    }).catch(error => {\n      console.error('Erro ao obter pessoas:', error);\n      throw new Error('Erro ao obter pessoas da API.');\n    });\n  },\n  async getById(id) {\n    try {\n      const response = await axios.get(`${API_URL}/pessoa/${id}`, {\n        headers: {\n          Authorization: `Bearer ${token}`\n        }\n      });\n      return response.data;\n    } catch (error) {\n      console.error('Erro ao obter produtos:', error);\n      throw new Error('Erro ao obter produtos da API.');\n    }\n  },\n  async cadastrar(data) {\n    try {\n      const response = await axios.post(`${API_URL}/pessoa`, data, {\n        headers: {\n          Authorization: `Bearer ${token}`\n        }\n      });\n      if (response.status === 201) {\n        return {\n          success: true,\n          message: 'Pessoa cadastrada com sucesso'\n        };\n      }\n    } catch (error) {\n      console.error('Erro ao cadastrar a pessoa:', error);\n      return {\n        success: false,\n        message: 'Erro ao cadastrar a pessoa'\n      };\n    }\n  },\n  async atualizar(id, newData) {\n    try {\n      const response = await axios.put(`${API_URL}/pessoa/${id}`, newData, {\n        headers: {\n          Authorization: `Bearer ${token}`\n        }\n      });\n      if (response.status === 201) {\n        return {\n          success: true,\n          message: 'Cadastro de pessoa atualizada com sucesso'\n        };\n      }\n    } catch (error) {\n      console.error('Erro ao atualizar pessoa:', error);\n      throw new Error('Erro ao atualizar pessoa da API.');\n    }\n  },\n  async remover(id) {\n    try {\n      const response = await axios.delete(`${API_URL}/pessoa/${id}`, {\n        headers: {\n          Authorization: `Bearer ${token}`\n        }\n      });\n      if (response.status === 201) {\n        return {\n          success: true,\n          message: 'Cadastro de pessoa removido com sucesso'\n        };\n      }\n    } catch (error) {\n      console.error('Erro ao remover pessoa:', error);\n      throw new Error('Erro ao remover pessoa da API.');\n    }\n  }\n};\nexport default PessoasService;\n\n//mail@mail.com","map":{"version":3,"names":["axios","API_URL","token","localStorage","getItem","PessoasService","getAll","params","then","result","Error","alert","message","people","console","log","catch","error","getById","id","response","get","headers","Authorization","data","cadastrar","post","status","success","atualizar","newData","put","remover","delete"],"sources":["/home/brenomatheus/Documentos/Teste Pratico DEV Junior/frontend/src/services/api/pessoas/PessoasService.js"],"sourcesContent":["import axios from 'axios';\n\nconst API_URL = 'http://localhost:8000/api';\nconst token = localStorage.getItem('userToken');\n\nconst PessoasService = {\n  getAll(params) {\n    return PessoasService.getAll(params)\n      .then(result => {\n        if (result instanceof Error) {\n          alert(result.message);\n          return {};\n        } else {\n          this.people = result; \n          console.log(result)\n        }\n      })\n      .catch(error => {\n        console.error('Erro ao obter pessoas:', error);\n        throw new Error('Erro ao obter pessoas da API.');\n      });\n  },\n\n  async getById(id) {\n    try {\n      const response = await axios.get(`${API_URL}/pessoa/${id}`, {\n        headers: { Authorization: `Bearer ${token}` }\n      });\n      return response.data;\n    } catch (error) {\n      console.error('Erro ao obter produtos:', error);\n      throw new Error('Erro ao obter produtos da API.');\n    }\n  },\n\n  async cadastrar(data) {\n    try {\n        const response = await axios.post(`${API_URL}/pessoa`, data,{\n            headers: {\n              Authorization: `Bearer ${token}`\n            }\n          });\n\n      if (response.status === 201) {\n        return { success: true, message: 'Pessoa cadastrada com sucesso' };\n      }\n    } catch (error) {\n      console.error('Erro ao cadastrar a pessoa:', error);\n      return { success: false, message: 'Erro ao cadastrar a pessoa' };\n    }\n  },\n\n  async atualizar(id, newData) {\n    try {\n      const response = await axios.put(`${API_URL}/pessoa/${id}`, newData, {\n        headers: { Authorization: `Bearer ${token}` }\n      });\n      if (response.status === 201) {\n        return { success: true, message: 'Cadastro de pessoa atualizada com sucesso' };\n      }\n    } catch (error) {\n      console.error('Erro ao atualizar pessoa:', error);\n      throw new Error('Erro ao atualizar pessoa da API.');\n    }\n  },\n\n  async remover(id) {\n    try {\n      const response = await axios.delete(`${API_URL}/pessoa/${id}`, {\n        headers: { Authorization: `Bearer ${token}` }\n      });\n      if (response.status === 201) {\n        return { success: true, message: 'Cadastro de pessoa removido com sucesso' };\n      }\n    } catch (error) {\n      console.error('Erro ao remover pessoa:', error);\n      throw new Error('Erro ao remover pessoa da API.');\n    }\n  }\n\n};\n\nexport default PessoasService;\n\n//mail@mail.com"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}